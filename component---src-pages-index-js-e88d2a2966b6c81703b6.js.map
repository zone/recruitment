{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","_ref","formattedPages","data","pages","edges","map","_ref2","_ref2$node","node","id","title","frontmatter","slug","fields","depth","split","length","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","_components_Layout__WEBPACK_IMPORTED_MODULE_7__","_components_Hero__WEBPACK_IMPORTED_MODULE_6__","_components_Content__WEBPACK_IMPORTED_MODULE_5__","_ref3","key","style","paddingLeft","Array","join","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","propTypes","PropTypes","shape","array","isRequired","query"],"mappings":"uPAQe,SAASA,EAATC,GAAwC,IAC/CC,EAD+CD,EAAnBE,KAAQC,MACbC,MAAMC,IACjC,SAAAC,GAMM,IAAAC,EAAAD,EALJE,KACEC,EAIEF,EAJFE,GACeC,EAGbH,EAHFI,YAAeD,MACLE,EAERL,EAFFM,OAAUD,KAGNE,EAAQF,EAAKG,MAAM,KAAKC,OAAS,EAEvC,MAAO,CACLP,KACAC,QACAE,OACAE,UAGJ,IAGF,OACEG,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAMV,MAAM,cACZO,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,KACEJ,OAAAC,EAAA,EAAAD,CAAA,UACGhB,EAAeI,IAAI,SAAAiB,GAAA,IAClBb,EADkBa,EAClBb,GAAIC,EADcY,EACdZ,MAAOE,EADOU,EACPV,KAAME,EADCQ,EACDR,MADC,OAGlBG,OAAAC,EAAA,EAAAD,CAAA,MAAIM,IAAKd,EAAIe,MAAO,CAAEC,YAAgB,EAAIX,EAAT,OAC9B,IAAIY,MAAMZ,EAAQ,GAAGa,KAAK,KAD7B,IACmCV,OAAAC,EAAA,EAAAD,CAACW,EAAA,KAAD,CAAMC,GAAIjB,GAAOF,SAShEX,EAAU+B,UAAY,CACpB5B,KAAM6B,IAAUC,MAAM,CACpB7B,MAAO4B,IAAUE,MAAMC,aACtBA,YAGE,IAAMC,EAAK","file":"component---src-pages-index-js-e88d2a2966b6c81703b6.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql, Link } from 'gatsby'\r\n\r\nimport Content from '../components/Content'\r\nimport Hero from '../components/Hero'\r\nimport Layout from '../components/Layout'\r\n\r\nexport default function IndexPage({ data: { pages } }) {\r\n  const formattedPages = pages.edges.map(\r\n    ({\r\n      node: {\r\n        id,\r\n        frontmatter: { title },\r\n        fields: { slug },\r\n      },\r\n    }) => {\r\n      const depth = slug.split('/').length - 2\r\n\r\n      return {\r\n        id,\r\n        title,\r\n        slug,\r\n        depth,\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  return (\r\n    <Layout>\r\n      <Hero title=\"Zone Tech\" />\r\n      <Content>\r\n        <ul>\r\n          {formattedPages.map(({\r\n            id, title, slug, depth,\r\n          }) => (\r\n            <li key={id} style={{ paddingLeft: `${1 * depth}em` }}>\r\n              {new Array(depth + 1).join('-')} <Link to={slug}>{title}</Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </Content>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nIndexPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    pages: PropTypes.array.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nexport const query = graphql`\r\n  {\r\n    pages: allMarkdownRemark(sort: { order: ASC, fields: [fields___slug] }) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}